<?php

if (!defined("ASSEMBLA_REST_API_ROOT")) {
  define("ASSEMBLA_REST_API_ROOT", realpath(dirname(__DIR__)));
}

require_once ASSEMBLA_REST_API_ROOT . '/Autoload.php';
require_once ASSEMBLA_REST_API_ROOT . '/Core/Object.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-23 at 10:50:22.
 */
class Core_ObjectTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Core_Object
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Core_Object;
    }

    public function testHasDataChanges() {
      // Tests the actual attribute is equal to what the method returns
      $this->assertAttributeEquals($this->object->hasDataChanges(),
                                   '_hasDataChanges', $this->object);
    }

    public function testHasDataChangesDefaultsToFalse() {
      $this->assertAttributeEquals(false, '_hasDataChanges', $this->object);
    }

    public function testHasDataChangesWorksWithSetData() {
      $this->object->setData('foo', 'bar');
      $this->assertAttributeEquals(true, '_hasDataChanges', $this->object);
    }

    public function testHasDataChangesWorksWithUnsetData() {
      // non-existent key, but unset doesn't care
      $this->object->unsetData('some-key');
      $this->assertAttributeEquals(true, '_hasDataChanges', $this->object);
    }

    public function testHasDataChangesWorksWithCallSet() {
      $this->object->setFoo('bar');
      $this->assertAttributeEquals(true, '_hasDataChanges', $this->object);
    }

    public function testAddData() {
      $this->object->addData(array('example1' => 'value1',
                                   'example2' => 'value2'));

      $this->assertAttributeContains('value1', '_data', $this->object);
      $this->assertAttributeContains('value1', '_data', $this->object);
    }

    public function testAddDataReturnsCoreObject() {
      $this->assertInstanceOf('Core_Object',
                              $this->object->addData(array()));
    }

    /**
     * I don't think it's extremely clear what's going on here,
     * but passing an array to setData as the key, should
     * set all of _data to be that array, so we're adding a key
     * of foo, then overwriting _data, and ensuring foo doesn't
     * still exist.
     **/
    public function testSetDataWithArrayOverwritesData() {
      $this->object->setData('foo', 'bar');

      $this->object->setData(array('key1' => 'value1',
                                   'key2' => 'value2'));

      $this->assertAttributeNotContains('foo', '_data', $this->object);
    }

    public function testSetDataReturnsCoreObject() {
      $this->assertInstanceOf('Core_Object',
                              $this->object->setData('key', 'value'));
    }

    public function testSetDataSetsData() {
      $this->object->setData('some-key', 'some-value');

      $this->assertAttributeContains('some-value', '_data', $this->object);
    }

    public function testUnsetDataUnsetsAllDataWhenPassedNull() {
      $this->object->setData(array('key1' => 'value1',
                                   'key2' => 'value2'));

      $this->object->unsetData();

      $this->assertAttributeEmpty('_data', $this->object);
    }

    public function testUnsetDataUnsetsData() {
      $this->object->setData('test', 'testval');

      $this->object->unsetData('test');

      $this->assertAttributeNotContains('test', '_data', $this->object);
    }

    public function testUnsetDataReturnsCoreObject() {
      $this->assertInstanceOf('Core_Object', $this->object->unsetData(null));
      $this->assertInstanceOf('Core_Object', $this->object->unsetData('key'));
    }

    public function testGetDataReturnsAllWhenGivenNoKey() {
      $sample_data = array('key1' => 'value1',
                           'key2' => 'value2');

      $this->object->addData($sample_data);

      $this->assertAttributeEquals($this->object->getData(), '_data', $this->object);
    }

    public function testGetDataReturnsNullForNonExistentKey() {
      $this->assertNull($this->object->getData('some-non-existent-key'));
    }

    public function testGetDataReturnsKeyDataWithNoSlashes() {
      $this->object->setData('examplekey', 'exampleval');

      $this->assertEquals('exampleval', $this->object->getData('examplekey'));
    }

    // Needs many more test cases...
    public function testGetDataWithSlashes() {
      $this->object->setData('a', array('b' => 'value'));

      $this->assertEquals('value', $this->object->getData('a/b'));
    }

    /**
     * @covers Core_Object::__toArray
     * @todo   Implement test__toArray().
     */
    public function test__toArray()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Core_Object::toArray
     * @todo   Implement testToArray().
     */
    public function testToArray()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Core_Object::toXml
     * @todo   Implement testToXml().
     */
    public function testToXml()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Core_Object::toJson
     * @todo   Implement testToJson().
     */
    public function testToJson()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Core_Object::toString
     * @todo   Implement testToString().
     */
    public function testToString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Core_Object::__call
     * @todo   Implement test__call().
     */
    public function test__call()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    public function testIsEmpty() {
      $this->assertTrue($this->object->isEmpty());

      $this->object->setData('key', 'val');

      $this->assertFalse($this->object->isEmpty());
    }

    /**
     * @covers Core_Object::getOrigData
     * @todo   Implement testGetOrigData().
     */
    public function testGetOrigData()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Core_Object::setOrigData
     * @todo   Implement testSetOrigData().
     */
    public function testSetOrigData()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Core_Object::dataHasChangedFor
     * @todo   Implement testDataHasChangedFor().
     */
    public function testDataHasChangedFor()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
